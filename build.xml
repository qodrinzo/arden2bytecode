<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!--
    Alternate build option for arden2bytecode.
    Used in Eclipse Project to launch SableCC.
    
    Author: Hannes Flicka (hflicka@github)
-->
<project name="arden2bytecode" default="compile" basedir=".">
    <description>arden2bytecode ant build script</description>

    <!-- global properties -->
    <property name="debug" value="on" />
    <property name="optimize" value="off" />
    <property name="deprecation" value="on" />
    <tstamp>
        <format property="release.stamp" pattern="yyyy-MM-dd" locale="en,US" />
    </tstamp>
    <property name="version" value="${DSTAMP}-${TSTAMP}" />
    <property name="name" value="${ant.project.name}" />
    <property name="src.dir" value="src" />
    <property name="test.dir" value="test" />
    <property name="test.report.dir" value="report" />
    <property name="tools.dir" value="tools" />
    <property name="resource.dir" value="resource" />
    <property name="lib.dir" value="lib" />
    <property name="build.dir" value="bin" />
    <property name="dist.dir" value="dist" />
    <property name="dist.file" value="${name}-${version}.jar" />
    <property name="dist.source" value="on" />
    <property name="mainclass" value="arden.MainClass" />
    <property name="mainclass.test.implementation" value="arden.tests.implementation.ImplementationTestSuite" />
    <property name="mainclass.test.specification" value="arden.tests.specification.SpecificationTestSuite" />
    
    <filter token="log" value="true" />
    <filter token="verbose" value="true" />
    
    <path id="build.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
    </path>
    <path id="test.classpath">
        <path refid="build.classpath" />
        <path location="${build.dir}" />
        <path location="." />
    </path>
    <path id="dist.classpath">
        <path location="." />
    </path>
    <fileset id="dist.libs" dir="${lib.dir}" includes="*.jar">
        <!-- exclude these libs from the generated jar -->
        <exclude name="junit*.jar" />
        <exclude name="hamcrest-core*.jar" />
        <exclude name="sqlite-jdbc*.jar" />
    </fileset>
    
    
    <target name="dependencies" description="Download dependencies">
        <mkdir dir="${tools.dir}" />
        <get dest="${tools.dir}/sablecc.jar" skipexisting="true"
            src="https://repo.maven.apache.org/maven2/sablecc/sablecc/3.2-1/sablecc-3.2-1.jar" />
            
        <mkdir dir="${lib.dir}" />
        <get dest="${lib.dir}" skipexisting="true">
            <url url="https://repo.maven.apache.org/maven2/com/lexicalscope/jewelcli/jewelcli/0.8.9/jewelcli-0.8.9.jar" />
            <url url="https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" />
            <url url="https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.jar" />
            <url url="https://repo.maven.apache.org/maven2/org/xerial/sqlite-jdbc/3.8.11.2/sqlite-jdbc-3.8.11.2.jar" />
        </get>
    </target>

    
    <target name="clean"
        description="Clean the 'bin', 'dist' and 'reports' directories and delete SableCC-generated .java files">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}" includes="**/*" />
            <fileset dir="${dist.dir}" includes="**/*" />
            <fileset dir="${test.report.dir}" includes="**/*" />
            <fileset dir="${src.dir}/arden/constants/analysis" includes="**/*" />
            <fileset dir="${src.dir}/arden/constants/lexer" includes="**/*" />
            <fileset dir="${src.dir}/arden/constants/node" includes="**/*" />
            <fileset dir="${src.dir}/arden/constants/parser" includes="**/*" />
            <fileset dir="${src.dir}/arden/compiler/analysis" includes="**/*" />
            <fileset dir="${src.dir}/arden/compiler/lexer" includes="**/*" />
            <fileset dir="${src.dir}/arden/compiler/node" includes="**/*" />
            <fileset dir="${src.dir}/arden/compiler/parser" includes="**/*" />
        </delete>
    </target>

    
    <target name="compile" depends="sableCC, dependencies"
        description="Compile sources">
        <mkdir dir="${build.dir}" />
        
        <!-- copy other (not .java) files -->
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.java" />
                <exclude name="**/*.class" />
            </fileset>
            <fileset dir="${test.dir}">
                <exclude name="**/*.java" />
                <exclude name="**/*.class" />
            </fileset>
        </copy>
        
        <javac srcdir="${src.dir}:${test.dir}" destdir="${build.dir}" debug="${debug}"
            classpathref="build.classpath" optimize="${optimize}" source="1.7" includeantruntime="false">
            <include name="**/*.java" />
        </javac>
    </target>

    
    <target name="sableCC" depends="dependencies, sableCC.constants, sableCC.compiler"
        description="Start sableCC to generate parsers from grammars">
    </target>

    
    <target name="sableCC.init">
        <!-- create SableCC directories -->
        <mkdir dir="${src.dir}/arden/compiler/analysis" />
        <mkdir dir="${src.dir}/arden/compiler/lexer" />
        <mkdir dir="${src.dir}/arden/compiler/node" />
        <mkdir dir="${src.dir}/arden/compiler/parser" />
        <mkdir dir="${src.dir}/arden/constants/analysis" />
        <mkdir dir="${src.dir}/arden/constants/lexer" />
        <mkdir dir="${src.dir}/arden/constants/node" />
        <mkdir dir="${src.dir}/arden/constants/parser" />

        <uptodate property="sableCC.compiler.update.necessary" targetfile="${src.dir}/arden.scc">
            <srcfiles dir="${src.dir}/arden/compiler/analysis" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/compiler/lexer" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/compiler/node" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/compiler/parser" includes="**/*" />
        </uptodate>
        <uptodate property="sableCC.constants.update.necessary" targetfile="${src.dir}/ardenConstants.scc">
            <srcfiles dir="${src.dir}/arden/constants/analysis" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/constants/lexer" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/constants/node" includes="**/*" />
            <srcfiles dir="${src.dir}/arden/constants/parser" includes="**/*" />
        </uptodate>

        <taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc">
            <classpath>
                <pathelement location="${tools.dir}/sablecc.jar" />
            </classpath>
        </taskdef>
    </target>

    
    <target name="sableCC.compiler" depends="sableCC.init" if="sableCC.compiler.update.necessary">
        <sablecc src="${src.dir}" includes="arden.scc" outputdirectory="${src.dir}"/>
    </target>

    
    <target name="sableCC.constants" depends="sableCC.init" if="sableCC.constants.update.necessary">
        <sablecc src="${src.dir}" includes="ardenConstants.scc" outputdirectory="${src.dir}"/>
    </target>

    
    <target name="jar" depends="compile" description="Generate .jar bundle">
        <mkdir dir="${dist.dir}" />
        <manifestclasspath property="manifest.classpath" jarfile="${dist.file}">
            <classpath refid="dist.classpath" />
        </manifestclasspath>
        <jar destfile="${dist.dir}/${dist.file}">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${mainclass}" />
                <!-- <attribute name="Class-Path" value="${manifest.classpath}" /> -->
                <attribute name="Implementation-Vendor" value="${user.name}" />
                <attribute name="Implementation-Title" value="${name}" />
                <attribute name="Implementation-Version" value="${version}" />
            </manifest>
            <!-- include build without tests -->
            <fileset dir="${build.dir}" excludes="arden/tests/**" />
            <!-- include source -->
            <fileset dir="${src.dir}">
                <include name="**/*.java" if="${dist.source}"/>
            </fileset>
            <fileset file="${resource.dir}/arden2bytecode.config" />
            <!-- include libraries -->
            <zipgroupfileset refid="dist.libs" />
        </jar>
        <basename property="jar.filename" file="${dist.file}" />
        
        <!-- generated cmd and shell script -->
        <echo file="${dist.dir}/${name}.cmd" append="false">@echo off
             java -jar "%~dp0${jar.filename}" %*
             rem pause
        </echo>
        <echo file="${dist.dir}/${name}" append="false">#!/bin/sh
             java -jar "$( cd -P "$( dirname "$0" )" &amp;&amp; pwd )/${jar.filename}" "$@"
        </echo>
        <chmod file="${dist.dir}/${name}" perm="ugo+x" />
    </target>

    
    <target name="dist" depends="jar" description="Build distribution .tar and .zip file">
        <tar destfile="${dist.dir}/${name} - binary release ${release.stamp}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}">
                <include name="${dist.file}" />
                <include name="${name}.cmd" />
            </tarfileset>
            <tarfileset dir="${dist.dir}" filemode="755">
                <include name="${name}" />
            </tarfileset>
            <tarfileset dir="${resource.dir}">
                <include name="examples/**" />
            </tarfileset>
        </tar>
        
        <zip destfile="${dist.dir}/${name} - binary release ${release.stamp}.zip">
            <zipfileset dir="${dist.dir}">
                <include name="${dist.file}" />
                <include name="${name}.cmd" />
            </zipfileset>
            <zipfileset dir="${dist.dir}" filemode="755">
                <include name="${name}" />
            </zipfileset>
            <zipfileset dir="${resource.dir}">
                <include name="examples/**" />
            </zipfileset>
        </zip>
    </target>

      
    <target name="test" depends="test.specification, test.implementation"
        description="Generate report of the test suites (implementation and standard compliance)">
        <junitreport todir="${test.report.dir}">
            <fileset dir="${test.report.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="noframes" todir="${test.report.dir}" />
        </junitreport>
    	<fail if="test.failure" message="Unit test(s) failed. See reports!"/>
    </target>
    
    
    <target name="test.implementation" depends="compile">
        <mkdir dir="${test.report.dir}" />
        <junit fork="yes" printsummary="withOutAndErr" failureproperty="test.failure">
            <formatter type="xml" />
            <classpath refid="test.classpath" />
            <test name="${mainclass.test.implementation}" todir="${test.report.dir}" />
        </junit>
    </target>

    
    <target name="test.specification" depends="compile">
        <mkdir dir="${test.report.dir}" />
        <junit fork="yes" printsummary="withOutAndErr" failureproperty="test.failure">
            <formatter type="xml" />
            <classpath refid="test.classpath" />
            <test name="${mainclass.test.specification}" todir="${test.report.dir}" />
        </junit>
    </target>

</project>

